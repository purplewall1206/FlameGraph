/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __STACKTRACE_BPF_SKEL_H__
#define __STACKTRACE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct stacktrace_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *events;
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *profile;
	} progs;
	struct {
		struct bpf_link *profile;
	} links;
	struct stacktrace_bpf__bss {
		int my_pid;
	} *bss;

#ifdef __cplusplus
	static inline struct stacktrace_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct stacktrace_bpf *open_and_load();
	static inline int load(struct stacktrace_bpf *skel);
	static inline int attach(struct stacktrace_bpf *skel);
	static inline void detach(struct stacktrace_bpf *skel);
	static inline void destroy(struct stacktrace_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
stacktrace_bpf__destroy(struct stacktrace_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
stacktrace_bpf__create_skeleton(struct stacktrace_bpf *obj);

static inline struct stacktrace_bpf *
stacktrace_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct stacktrace_bpf *obj;
	int err;

	obj = (struct stacktrace_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = stacktrace_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	stacktrace_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct stacktrace_bpf *
stacktrace_bpf__open(void)
{
	return stacktrace_bpf__open_opts(NULL);
}

static inline int
stacktrace_bpf__load(struct stacktrace_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct stacktrace_bpf *
stacktrace_bpf__open_and_load(void)
{
	struct stacktrace_bpf *obj;
	int err;

	obj = stacktrace_bpf__open();
	if (!obj)
		return NULL;
	err = stacktrace_bpf__load(obj);
	if (err) {
		stacktrace_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
stacktrace_bpf__attach(struct stacktrace_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
stacktrace_bpf__detach(struct stacktrace_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *stacktrace_bpf__elf_bytes(size_t *sz);

static inline int
stacktrace_bpf__create_skeleton(struct stacktrace_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "stacktrace_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "events";
	s->maps[0].map = &obj->maps.events;

	s->maps[1].name = "stacktra.bss";
	s->maps[1].map = &obj->maps.bss;
	s->maps[1].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "profile";
	s->progs[0].prog = &obj->progs.profile;
	s->progs[0].link = &obj->links.profile;

	s->data = (void *)stacktrace_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *stacktrace_bpf__elf_bytes(size_t *sz)
{
	*sz = 3552;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x60\x0a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0e\0\
\x01\0\x7b\x1a\xf8\xff\0\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x09\0\0\0\0\0\0\x85\0\0\
\0\x08\0\0\0\xbf\x06\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\
\0\x20\x08\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\x07\0\0\0\0\0\0\xb7\
\x08\0\0\x01\0\0\0\x15\x07\x1e\0\0\0\0\0\x63\x67\x04\0\0\0\0\0\x77\x09\0\0\x20\
\0\0\0\x63\x97\0\0\0\0\0\0\xbf\x76\0\0\0\0\0\0\x07\x06\0\0\x08\0\0\0\xbf\x61\0\
\0\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x15\0\x02\0\0\0\0\0\xb7\
\x01\0\0\0\0\0\0\x73\x16\0\0\0\0\0\0\xbf\x72\0\0\0\0\0\0\x07\x02\0\0\x20\0\0\0\
\xb7\x08\0\0\0\0\0\0\x79\xa6\xf8\xff\0\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x03\0\0\0\
\x04\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x43\0\0\0\x63\x07\x18\0\0\0\0\0\xbf\x72\
\0\0\0\0\0\0\x07\x02\0\0\x20\x04\0\0\xbf\x61\0\0\0\0\0\0\xb7\x03\0\0\0\x04\0\0\
\xb7\x04\0\0\0\x01\0\0\x85\0\0\0\x43\0\0\0\x63\x07\x1c\0\0\0\0\0\xbf\x71\0\0\0\
\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\xbf\x80\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x58\x01\0\0\x58\x01\0\0\xc6\
\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\
\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\
\0\0\0\x04\0\0\0\0\0\x04\0\0\0\0\0\x02\0\0\x04\x10\0\0\0\x19\0\0\0\x01\0\0\0\0\
\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x31\0\0\0\x09\0\0\0\x35\
\0\0\0\x01\0\0\x0c\x0a\0\0\0\x9f\x02\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\
\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x04\0\0\0\x0d\0\0\0\xa4\x02\0\0\0\0\0\x0e\x0d\0\
\0\0\x01\0\0\0\xac\x02\0\0\0\0\0\x0e\x02\0\0\0\x01\0\0\0\xb3\x02\0\0\x01\0\0\
\x0f\0\0\0\0\x0f\0\0\0\0\0\0\0\x04\0\0\0\xb8\x02\0\0\x01\0\0\x0f\0\0\0\0\x08\0\
\0\0\0\0\0\0\x10\0\0\0\xbe\x02\0\0\x01\0\0\x0f\0\0\0\0\x0e\0\0\0\0\0\0\0\x0d\0\
\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\
\x65\x73\0\x65\x76\x65\x6e\x74\x73\0\x63\x74\x78\0\x70\x72\x6f\x66\x69\x6c\x65\
\0\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\0\x2f\x68\x6f\x6d\x65\x2f\x77\x61\
\x6e\x67\x7a\x63\x2f\x44\x6f\x63\x75\x6d\x65\x6e\x74\x73\x2f\x46\x6c\x61\x6d\
\x65\x47\x72\x61\x70\x68\x2d\x66\x6f\x72\x2d\x6e\x65\x77\x2d\x64\x65\x66\x65\
\x6e\x73\x65\x2f\x65\x62\x70\x66\x2f\x70\x72\x6f\x6a\x65\x63\x74\x73\x2f\x73\
\x74\x61\x63\x6b\x74\x72\x61\x63\x65\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\
\x70\x72\x6f\x66\x69\x6c\x65\x28\x76\x6f\x69\x64\x20\x2a\x63\x74\x78\x29\0\x09\
\x69\x6e\x74\x20\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\
\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\
\x3e\x20\x33\x32\x3b\0\x09\x69\x6e\x74\x20\x63\x70\x75\x5f\x69\x64\x20\x3d\x20\
\x62\x70\x66\x5f\x67\x65\x74\x5f\x73\x6d\x70\x5f\x70\x72\x6f\x63\x65\x73\x73\
\x6f\x72\x5f\x69\x64\x28\x29\x3b\0\x09\x65\x76\x65\x6e\x74\x20\x3d\x20\x62\x70\
\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\x73\x65\x72\x76\x65\x28\x26\
\x65\x76\x65\x6e\x74\x73\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\x65\x76\x65\
\x6e\x74\x29\x2c\x20\x30\x29\x3b\0\x09\x69\x66\x20\x28\x21\x65\x76\x65\x6e\x74\
\x29\0\x09\x65\x76\x65\x6e\x74\x2d\x3e\x63\x70\x75\x5f\x69\x64\x20\x3d\x20\x63\
\x70\x75\x5f\x69\x64\x3b\0\x09\x65\x76\x65\x6e\x74\x2d\x3e\x70\x69\x64\x20\x3d\
\x20\x70\x69\x64\x3b\0\x09\x69\x66\x20\x28\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\
\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x65\x76\x65\x6e\x74\x2d\x3e\
\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\x76\x65\x6e\x74\x2d\
\x3e\x63\x6f\x6d\x6d\x29\x29\x29\0\x09\x09\x65\x76\x65\x6e\x74\x2d\x3e\x63\x6f\
\x6d\x6d\x5b\x30\x5d\x20\x3d\x20\x30\x3b\0\x09\x65\x76\x65\x6e\x74\x2d\x3e\x6b\
\x73\x74\x61\x63\x6b\x5f\x73\x7a\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\
\x73\x74\x61\x63\x6b\x28\x63\x74\x78\x2c\x20\x65\x76\x65\x6e\x74\x2d\x3e\x6b\
\x73\x74\x61\x63\x6b\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\x76\x65\x6e\x74\
\x2d\x3e\x6b\x73\x74\x61\x63\x6b\x29\x2c\x20\x30\x29\x3b\0\x09\x65\x76\x65\x6e\
\x74\x2d\x3e\x75\x73\x74\x61\x63\x6b\x5f\x73\x7a\x20\x3d\x20\x62\x70\x66\x5f\
\x67\x65\x74\x5f\x73\x74\x61\x63\x6b\x28\x63\x74\x78\x2c\x20\x65\x76\x65\x6e\
\x74\x2d\x3e\x75\x73\x74\x61\x63\x6b\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\
\x76\x65\x6e\x74\x2d\x3e\x75\x73\x74\x61\x63\x6b\x29\x2c\x20\x42\x50\x46\x5f\
\x46\x5f\x55\x53\x45\x52\x5f\x53\x54\x41\x43\x4b\x29\x3b\0\x09\x62\x70\x66\x5f\
\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x76\x65\x6e\
\x74\x2c\x20\x30\x29\x3b\0\x7d\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\
\0\x6d\x79\x5f\x70\x69\x64\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\x6c\x69\
\x63\x65\x6e\x73\x65\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\
\x4c\x01\0\0\x60\x01\0\0\0\0\0\0\x08\0\0\0\x3d\0\0\0\x01\0\0\0\0\0\0\0\x0b\0\0\
\0\x10\0\0\0\x3d\0\0\0\x14\0\0\0\0\0\0\0\x48\0\0\0\x99\0\0\0\0\x20\x01\0\x08\0\
\0\0\x48\0\0\0\xb0\0\0\0\x0c\x28\x01\0\x18\0\0\0\x48\0\0\0\xdd\0\0\0\x0f\x2c\
\x01\0\x28\0\0\0\x48\0\0\0\x07\x01\0\0\x0a\x3c\x01\0\x60\0\0\0\x48\0\0\0\x41\
\x01\0\0\x06\x40\x01\0\x68\0\0\0\x48\0\0\0\x4e\x01\0\0\x10\x50\x01\0\x70\0\0\0\
\x48\0\0\0\xb0\0\0\0\x27\x28\x01\0\x78\0\0\0\x48\0\0\0\x67\x01\0\0\x0d\x4c\x01\
\0\x80\0\0\0\x48\0\0\0\x7a\x01\0\0\x22\x58\x01\0\x90\0\0\0\x48\0\0\0\x7a\x01\0\
\0\x06\x58\x01\0\xa8\0\0\0\x48\0\0\0\x7a\x01\0\0\x06\x58\x01\0\xb8\0\0\0\x48\0\
\0\0\xb7\x01\0\0\x12\x5c\x01\0\xc0\0\0\0\x48\0\0\0\xcd\x01\0\0\x2f\x64\x01\0\
\xe0\0\0\0\x48\0\0\0\xcd\x01\0\0\x15\x64\x01\0\0\x01\0\0\x48\0\0\0\xcd\x01\0\0\
\x13\x64\x01\0\x08\x01\0\0\x48\0\0\0\x1e\x02\0\0\x2f\x6c\x01\0\x18\x01\0\0\x48\
\0\0\0\x1e\x02\0\0\x15\x6c\x01\0\x38\x01\0\0\x48\0\0\0\x1e\x02\0\0\x13\x6c\x01\
\0\x40\x01\0\0\x48\0\0\0\x7e\x02\0\0\x02\x74\x01\0\x58\x01\0\0\x48\0\0\0\x9d\
\x02\0\0\x01\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\0\0\0\0\0\x03\0\x58\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\x03\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x4b\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\x23\0\0\0\x11\0\x07\
\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x73\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x0d\
\0\0\0\0\0\0\0\x53\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x28\0\0\
\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x38\x01\0\0\0\0\0\0\x04\0\0\0\x07\0\0\0\x50\x01\
\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x68\x01\0\0\0\0\0\0\x04\0\0\0\x06\0\0\0\x2c\0\
\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\
\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\
\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\0\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x10\x01\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x20\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x30\x01\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x40\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\x01\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x60\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\x01\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\x0d\x0f\x0e\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\
\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x72\x65\x6c\x70\x65\x72\x66\x5f\x65\x76\
\x65\x6e\x74\0\x65\x76\x65\x6e\x74\x73\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\
\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\
\x73\x65\0\x70\x72\x6f\x66\x69\x6c\x65\0\x6d\x79\x5f\x70\x69\x64\0\x2e\x73\x74\
\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\
\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\
\x5f\x33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5a\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\x09\0\0\0\0\0\0\x89\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x40\0\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\x08\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x43\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x01\0\0\
\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x2a\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x01\0\0\0\0\0\0\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\0\0\0\x01\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6e\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\x36\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x50\x08\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x0d\0\0\0\x08\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x06\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x08\0\0\
\0\0\0\0\x50\x01\0\0\0\0\0\0\x0d\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x35\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x09\0\0\
\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x62\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x07\0\0\0\0\0\0\xc0\0\
\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct stacktrace_bpf *stacktrace_bpf::open(const struct bpf_object_open_opts *opts) { return stacktrace_bpf__open_opts(opts); }
struct stacktrace_bpf *stacktrace_bpf::open_and_load() { return stacktrace_bpf__open_and_load(); }
int stacktrace_bpf::load(struct stacktrace_bpf *skel) { return stacktrace_bpf__load(skel); }
int stacktrace_bpf::attach(struct stacktrace_bpf *skel) { return stacktrace_bpf__attach(skel); }
void stacktrace_bpf::detach(struct stacktrace_bpf *skel) { stacktrace_bpf__detach(skel); }
void stacktrace_bpf::destroy(struct stacktrace_bpf *skel) { stacktrace_bpf__destroy(skel); }
const void *stacktrace_bpf::elf_bytes(size_t *sz) { return stacktrace_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
stacktrace_bpf__assert(struct stacktrace_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->bss->my_pid) == 4, "unexpected size of 'my_pid'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __STACKTRACE_BPF_SKEL_H__ */
